{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Giri\u015f: T\u00fcm Dart Kodlar\u0131 bir main() i\u00e7inde \u00e7al\u0131\u015f\u0131r. \u00d6rnek bir kod olarak klasik bir Hello World Kodu yazal\u0131m. void main() { print('Hello World!'); } Yorum Sat\u0131rlar\u0131: Yorum sat\u0131rlar\u0131 kod taraf\u0131ndan okunmaz ve derlenmez. Yorum sat\u0131rlar\u0131 yaz\u0131l\u0131mc\u0131n\u0131n ve ekibinin baz\u0131 notlar\u0131n\u0131 veyahut kodu a\u00e7\u0131klamas\u0131 i\u00e7in yaz\u0131lan a\u00e7\u0131klamalar\u0131n yaz\u0131laca\u011f\u0131 k\u0131s\u0131md\u0131r. Yorum sat\u0131rlar\u0131 clean code prensibi ve ekip \u00e7al\u0131\u015fmas\u0131 i\u00e7in \u00f6nemli bir fakt\u00f6rd\u00fcr. Dart'ta tek sat\u0131rl\u0131k yorum sat\u0131rlar\u0131 // ile ba\u015flar. \u00d6rne\u011fin; dart // Bu bir tek sat\u0131rl\u0131k Yorum sat\u0131r\u0131d\u0131r Dart'ta \u00e7ok sat\u0131rl\u0131k yorum sat\u0131rlar\u0131 /* */ aras\u0131na yaz\u0131l\u0131r. \u00d6ncekinden fark\u0131 \u00e7ok sat\u0131rl\u0131 olarak kullan\u0131labilir. \u00d6rnek kullan\u0131m; dart /* Bu bir \u00e7ok sat\u0131rl\u0131k yorum sat\u0131r\u0131d\u0131r. Bu kodlar okunmaz veyahut derlenmez. */ Syntax Temelleri: Dart dilinin temel syntax yap\u0131s\u0131 hakk\u0131nda bilgi edinece\u011fiz. De\u011fi\u015fkenler: De\u011fi\u015fkenler, program i\u00e7erisinde kullan\u0131lan ve de\u011fi\u015fkenlik g\u00f6steren de\u011ferlerdir. - De\u011fi\u015fkenler var , final ve const anahtar kelimeleri ile tan\u0131mlanabilir. - var anahtar kelimesi ile tan\u0131mlanan de\u011fi\u015fkenler tipini derleme zaman\u0131nda otomatik olarak belirler. dart var name = 'Osman'; final anahtar kelimesi ile tan\u0131mlanan de\u011fi\u015fkenler, bir kere atanan de\u011ferini de\u011fi\u015ftiremez. dart final surname = 'Beyhan'; const anahtar kelimesi ile tan\u0131mlanan de\u011fi\u015fkenler, program \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda sabitlenir ve de\u011fi\u015ftirilemez. dart const pi = 3.14; De\u011fi\u015fkenler tipine g\u00f6re de tan\u0131mlanabilir. Dart dilinde \u00e7e\u015fitli veri t\u00fcrleri (de\u011fi\u015fken tipleri) bulunmaktad\u0131r. Bu veri tipleri, Dart'\u0131n statik olarak t\u00fcr kontrol\u00fcne dayal\u0131 g\u00fc\u00e7l\u00fc yap\u0131s\u0131n\u0131 destekler. Dart'taki temel de\u011fi\u015fken tiplerini \u015fu \u015fekilde \u00f6zetleyebiliriz: 1. int Tam say\u0131lar\u0131 temsil eder. Pozitif ve negatif tam say\u0131lar\u0131 kapsar. dart int age = 30; int negative = -5; 2. double Ondal\u0131kl\u0131 say\u0131lar i\u00e7in kullan\u0131l\u0131r. Kesirli de\u011ferler temsil edilir. dart double height = 1.75; double pi = 3.14159; 3. num Hem int hem de double t\u00fcrlerini kapsayan bir veri t\u00fcr\u00fcd\u00fcr. int ve double de\u011ferleri alabilir. dart num temperature = 37.5; num year = 2024; 4. String Metin ifadelerini temsil eder. Tek veya \u00e7ift t\u0131rnakla belirtilir. dart String name = 'Osman Beyhan'; String greeting = \"Merhaba, D\u00fcnya!\"; 5. bool Mant\u0131ksal veri tipi olup, true veya false de\u011ferlerini al\u0131r. dart bool isLoggedIn = true; bool isRaining = false; 6. List Bir dizi veya listeyi temsil eder. Hem sabit boyutlu hem de dinamik olarak b\u00fcy\u00fcyebilen yap\u0131lar olu\u015fturulabilir. dart List<int> numbers = [1, 2, 3, 4]; List<String> names = ['Ahmet', 'Mehmet', 'Ay\u015fe']; 7. Set Her \u00f6\u011fesi benzersiz olan ve s\u0131ralanmam\u0131\u015f koleksiyonlar\u0131 temsil eder. dart Set<int> uniqueNumbers = {1, 2, 3, 4, 5}; 8. Map Anahtar-de\u011fer \u00e7iftleri ile \u00e7al\u0131\u015fan veri yap\u0131s\u0131d\u0131r. dart Map<String, int> ages = {'Ali': 25, 'Veli': 30}; 9. dynamic Bir de\u011fi\u015fkenin veri t\u00fcr\u00fcn\u00fcn \u00e7al\u0131\u015fma zaman\u0131nda belirlenmesini sa\u011flar. dynamic t\u00fcr\u00fc kullan\u0131ld\u0131\u011f\u0131nda, o de\u011fi\u015fken herhangi bir veri tipi alabilir. dart dynamic value = 42; value = 'Bir metin'; // T\u00fcr\u00fc de\u011fi\u015ftirebilir. 10. var Veri tipini otomatik olarak belirler. Bir kez belirlendikten sonra de\u011fi\u015fkenin tipi sabit kal\u0131r. dart var city = 'Istanbul'; // Dart bunu otomatik olarak String olarak belirler. var score = 100; // Dart bunu int olarak belirler. 11. Object Dart'taki t\u00fcm nesnelerin \u00fcst s\u0131n\u0131f\u0131d\u0131r. Herhangi bir veri t\u00fcr\u00fc Object tipinde bir de\u011fi\u015fkene atanabilir. dart Object something = 'Dart'; something = 123; 12. Null null de\u011ferini tutabilen bir t\u00fcrd\u00fcr. Dart'ta, de\u011fi\u015fkenler varsay\u0131lan olarak null de\u011fer alabilir. dart String? name = null; // null olabilmesi i\u00e7in '?' i\u015fareti ile tan\u0131mlan\u0131r. Bu veri t\u00fcrleri Dart'\u0131n temelini olu\u015fturur ve daha karma\u015f\u0131k yap\u0131lar ve s\u0131n\u0131flar tan\u0131mlamak i\u00e7in kullan\u0131labilir. Operat\u00f6rler: Tabii, Dart dilindeki operat\u00f6rler farkl\u0131 kategorilere ayr\u0131lmaktad\u0131r. Bu kategoriler aras\u0131nda aritmetik, kar\u015f\u0131la\u015ft\u0131rma, mant\u0131ksal, bit d\u00fczeyinde operat\u00f6rler ve atama operat\u00f6rleri gibi gruplar bulunur. Operat\u00f6r A\u00e7\u0131klama \u00d6rnek Aritmetik Operat\u00f6rler + Toplama a + b - \u00c7\u0131karma a - b * \u00c7arpma a * b / B\u00f6lme a / b % Mod alma (kalan bulma) a % b ~/ Tamsay\u0131 b\u00f6lme a ~/ b ++ Bir art\u0131rma (\u00f6ncesi veya sonras\u0131) a++ veya ++a -- Bir azaltma (\u00f6ncesi veya sonras\u0131) a-- veya --a Kar\u015f\u0131la\u015ft\u0131rma Operat\u00f6rleri == E\u015fit mi? a == b != E\u015fit de\u011fil mi? a != b > B\u00fcy\u00fckt\u00fcr a > b < K\u00fc\u00e7\u00fckt\u00fcr a < b >= B\u00fcy\u00fck veya e\u015fit a >= b <= K\u00fc\u00e7\u00fck veya e\u015fit a <= b Mant\u0131ksal Operat\u00f6rler && Mant\u0131ksal VE (Logical AND) a && b || Mant\u0131ksal VEYA (Logical OR) a || b ! Mant\u0131ksal DE\u011e\u0130L (Logical NOT) !a Bit D\u00fczeyinde Operat\u00f6rler & Bit d\u00fczeyinde VE (AND) a & b | Bit d\u00fczeyinde VEYA (OR) a | b ^ Bit d\u00fczeyinde \u00d6zel VEYA (XOR) a ^ b ~ Bit d\u00fczeyinde TERS\u0130 (NOT) ~a << Bitleri sola kayd\u0131rma a << 2 >> Bitleri sa\u011fa kayd\u0131rma a >> 2 Atama Operat\u00f6rleri = Atama a = b += Toplam ve atama a += b -= Fark ve atama a -= b *= \u00c7arp\u0131m ve atama a *= b /= B\u00f6l\u00fcm ve atama a /= b ~/= Tamsay\u0131 b\u00f6l\u00fcm ve atama a ~/= b %= Kalan ve atama a %= b &= Bit d\u00fczeyinde VE ve atama a &= b |= Bit d\u00fczeyinde VEYA ve atama a |= b ^= Bit d\u00fczeyinde XOR ve atama a ^= b <<= Bitleri sola kayd\u0131rma ve atama a <<= 2 >>= Bitleri sa\u011fa kayd\u0131rma ve atama a >>= 2 Di\u011fer Operat\u00f6rler ?. E\u011fer null de\u011filse \u00fcye eri\u015fimi sa\u011flar a?.b ?? Null kontrol\u00fc (E\u011fer null ise alternatif de\u011fer d\u00f6ner) a ?? b ??= E\u011fer null ise atama a ??= b is T\u00fcr kontrol\u00fc a is String is! T\u00fcr kontrol\u00fc (de\u011filse) a is! int as T\u00fcr d\u00f6n\u00fc\u015ft\u00fcrme a as String [] Listeden \u00f6\u011fe alma a[0] []= Listeye \u00f6\u011fe atama a[0] = 5 () Fonksiyon \u00e7a\u011f\u0131rma myFunction() \u00d6zel Operat\u00f6rler A\u00e7\u0131klamalar\u0131: ?. (Ko\u015fullu \u00dcye Eri\u015fimi) : E\u011fer bir nesne null ise, ?. operat\u00f6r\u00fc null kontrol\u00fc yapar ve \u00fcye eri\u015fimini engeller. dart String? name; print(name?.length); // null d\u00f6ner ?? (Null Birle\u015fim Operat\u00f6r\u00fc) : E\u011fer bir de\u011fer null ise, alternatif bir de\u011fer d\u00f6ner. dart String? name; String userName = name ?? 'Guest'; ??= (Null ile Atama) : E\u011fer bir de\u011fi\u015fken null ise, ona bir de\u011fer atan\u0131r. dart String? name; name ??= 'Guest'; // E\u011fer name null ise 'Guest' atan\u0131r. Bu operat\u00f6rler Dart dilinde temel yap\u0131 ta\u015flar\u0131n\u0131 olu\u015fturarak, ifadelerin daha k\u0131sa ve okunabilir bir \u015fekilde yaz\u0131lmas\u0131na olanak sa\u011flar. Meta Data: Dart'ta metadata , kodunuza ek a\u00e7\u0131klamalar veya bilgi eklemek i\u00e7in kullan\u0131l\u0131r. Metadata, s\u0131n\u0131flar, de\u011fi\u015fkenler, fonksiyonlar, parametreler ve di\u011fer dil \u00f6\u011felerine a\u00e7\u0131klama ekleyerek onlar\u0131n anlam\u0131n\u0131 geni\u015fletmeye ve belirli i\u015flevler eklemeye olanak tan\u0131r. Dart'taki metadata'y\u0131 genellikle annotation (a\u00e7\u0131klama) olarak adland\u0131r\u0131r\u0131z. Metadata, @ sembol\u00fc ile kullan\u0131l\u0131r ve genellikle bir s\u0131n\u0131f ya da const ile tan\u0131mlanan bir sabit ile birlikte gelir. Yayg\u0131n Kullan\u0131m Alanlar\u0131 @override : Bir metodun \u00fcst s\u0131n\u0131f taraf\u0131ndan tan\u0131mlanan bir metodu ge\u00e7ersiz k\u0131ld\u0131\u011f\u0131n\u0131 belirtir. @deprecated : Bir s\u0131n\u0131f, metod veya \u00f6zellik art\u0131k kullan\u0131lm\u0131yorsa, bunun yerine neyin kullan\u0131laca\u011f\u0131n\u0131 belirtmek i\u00e7in kullan\u0131l\u0131r. Custom (\u00f6zel) metadata : Kendi metadata s\u0131n\u0131flar\u0131n\u0131z\u0131 olu\u015fturabilir ve kullanabilirsiniz. \u00d6rnekler 1. @override Kullan\u0131m\u0131 class Animal { void sound() { print('Animal makes a sound'); } } class Dog extends Animal { @override void sound() { print('Dog barks'); } } Burada @override , Dog s\u0131n\u0131f\u0131n\u0131n sound metodunun Animal s\u0131n\u0131f\u0131ndaki ayn\u0131 isimli metodu ge\u00e7ersiz k\u0131ld\u0131\u011f\u0131n\u0131 belirtir. 2. @deprecated Kullan\u0131m\u0131 class MyClass { @deprecated void oldMethod() { print('This method is deprecated'); } void newMethod() { print('This is the new method'); } } @deprecated ile i\u015faretlenmi\u015f metod, art\u0131k kullan\u0131lmamas\u0131 gereken bir metod oldu\u011funu belirtir. Derleyici bu metodu kullan\u0131rsan\u0131z bir uyar\u0131 verecektir. 3. \u00d6zel Metadata Olu\u015fturma Dart'ta kendi metadata'n\u0131z\u0131 tan\u0131mlayabilir ve kullanabilirsiniz. \u00d6rne\u011fin, bir s\u0131n\u0131f\u0131 \u00f6zel bir i\u015faretle i\u015faretlemek istiyorsan\u0131z: class MyAnnotation { final String info; const MyAnnotation(this.info); } @MyAnnotation('This is a custom annotation') class MyClass { void myMethod() { print('Using custom metadata'); } } Burada MyAnnotation ad\u0131nda bir metadata tan\u0131mlanm\u0131\u015f ve MyClass \u00fczerine uygulanm\u0131\u015ft\u0131r. Bu sayede MyClass '\u0131n belirli bir bilgiyle i\u015faretlendi\u011fi g\u00f6r\u00fcl\u00fcr. Sonu\u00e7 Dart'taki metadata, kodunuza a\u00e7\u0131klama eklemek, belirsizli\u011fi azaltmak veya derleyiciye ve programc\u0131ya belirli y\u00f6nergeler vermek i\u00e7in kullan\u0131l\u0131r. Hem yerle\u015fik (built-in) hem de \u00f6zel metadata tan\u0131mlayarak kodunuzu daha anlaml\u0131 hale getirebilirsiniz. K\u00fct\u00fcphaneler ve import etme: Dart dilinde k\u00fct\u00fcphaneler (libraries), kodunuzu mod\u00fcler bir \u015fekilde d\u00fczenlemek ve yeniden kullan\u0131labilir hale getirmek i\u00e7in kullan\u0131l\u0131r. Dart'ta k\u00fct\u00fcphaneler, genellikle ba\u015fka projelerde de kullan\u0131labilecek s\u0131n\u0131flar, fonksiyonlar ve de\u011fi\u015fkenler i\u00e7erir. Bu k\u00fct\u00fcphaneleri kullanabilmek i\u00e7in kodunuza import anahtar kelimesiyle dahil edebilirsiniz. K\u00fct\u00fcphaneler (Libraries) Her Dart dosyas\u0131 asl\u0131nda bir k\u00fct\u00fcphane olarak kabul edilir. Ancak, daha karma\u015f\u0131k projelerde kodunuzu daha iyi organize etmek i\u00e7in birden fazla k\u00fct\u00fcphane olu\u015fturabilirsiniz. Dart'ta \u00fc\u00e7 ana t\u00fcrde k\u00fct\u00fcphane bulunur: Yerle\u015fik K\u00fct\u00fcphaneler (Built-in Libraries) : Dart taraf\u0131ndan sa\u011flanan ve dart: ile ba\u015flayan k\u00fct\u00fcphaneler. Paket K\u00fct\u00fcphaneleri (Package Libraries) : pub.dev gibi kaynaklardan gelen ve package: ile ba\u015flayan k\u00fct\u00fcphaneler. Yerel veya \u00d6zelle\u015ftirilmi\u015f K\u00fct\u00fcphaneler : Projeye \u00f6zel k\u00fct\u00fcphaneler. import Kullan\u0131m\u0131 Dart'ta bir k\u00fct\u00fcphaneyi kullanmak i\u00e7in import anahtar kelimesi kullan\u0131l\u0131r. K\u00fct\u00fcphaneler \u015fu formatlarda import edilir: Yerle\u015fik K\u00fct\u00fcphaneler (dart:) Paket K\u00fct\u00fcphaneleri (package:) Dosya Yolu ile K\u00fct\u00fcphaneler 1. Yerle\u015fik K\u00fct\u00fcphaneler ( dart: ) Dart diliyle birlikte gelen yerle\u015fik k\u00fct\u00fcphaneler dart: ile ba\u015flar. \u00d6rne\u011fin: import 'dart:math'; // Matematiksel fonksiyonlar i\u00e7in import 'dart:io'; // I/O i\u015flemleri i\u00e7in import 'dart:convert'; // JSON ve UTF-8 i\u015flemleri i\u00e7in 2. Paket K\u00fct\u00fcphaneleri ( package: ) Dart'\u0131n pub.dev paket y\u00f6neticisiyle indirilen k\u00fct\u00fcphaneler package: ile kullan\u0131l\u0131r. \u00d6rne\u011fin, http paketini kullanarak HTTP istekleri yapabilirsiniz: import 'package:http/http.dart' as http; // HTTP istekleri i\u00e7in pubspec.yaml dosyan\u0131zda bu paketleri belirtmeniz gerekti\u011fini unutmay\u0131n: dependencies: http: ^0.13.3 3. Yerel Dosya Yolu ile K\u00fct\u00fcphaneler Kendi projenizdeki ba\u015fka bir dosyadan k\u00fct\u00fcphane import etmek i\u00e7in dosya yolunu kullanabilirsiniz: import 'lib/my_library.dart'; // Projedeki bir dosyay\u0131 import eder import Se\u00e7enekleri Dart'ta k\u00fct\u00fcphanelerle \u00e7al\u0131\u015f\u0131rken baz\u0131 ek \u00f6zellikler kullanabilirsiniz: 1. as : Bir K\u00fct\u00fcphaneye Takma Ad Vermek Bir k\u00fct\u00fcphaneyi import ederken ona bir takma ad verebilirsiniz. Bu \u00f6zellikle ayn\u0131 isimde fonksiyon veya s\u0131n\u0131flar oldu\u011funda \u00e7ak\u0131\u015fmalar\u0131 \u00f6nlemek i\u00e7in kullan\u0131l\u0131r. import 'package:http/http.dart' as http; import 'package:my_project/network.dart' as network; void main() { http.get(...); network.request(...); } 2. show : Belirli Fonksiyonlar\u0131 veya S\u0131n\u0131flar\u0131 \u0130\u00e7e Aktarmak Bir k\u00fct\u00fcphaneden sadece belirli elemanlar\u0131 almak i\u00e7in show kullanabilirsiniz: import 'dart:math' show pi, sqrt; // Sadece pi ve sqrt fonksiyonlar\u0131n\u0131 import eder 3. hide : Belirli Fonksiyonlar\u0131 veya S\u0131n\u0131flar\u0131 Gizlemek Bir k\u00fct\u00fcphaneden baz\u0131 elemanlar\u0131 gizlemek i\u00e7in hide kullanabilirsiniz: import 'dart:math' hide sin, cos; // sin ve cos fonksiyonlar\u0131n\u0131 gizler, di\u011ferlerini import eder 4. deferred as : Gecikmeli Y\u00fckleme E\u011fer b\u00fcy\u00fck bir k\u00fct\u00fcphaneyi ihtiya\u00e7 duyulana kadar y\u00fcklemek istemiyorsan\u0131z, gecikmeli y\u00fckleme kullanabilirsiniz. Bu, performans optimizasyonu sa\u011flar. import 'package:my_library/my_library.dart' deferred as myLibrary; void main() async { await myLibrary.loadLibrary(); // K\u00fct\u00fcphaneyi y\u00fckler myLibrary.someFunction(); } \u00d6rnekler \u00d6rnek: Yerle\u015fik K\u00fct\u00fcphaneyi Kullanma import 'dart:math'; void main() { var random = Random(); print(random.nextInt(100)); // 0 ile 100 aras\u0131nda rastgele say\u0131 \u00fcretir } \u00d6rnek: Paket K\u00fct\u00fcphanesini Kullanma import 'package:http/http.dart' as http; void main() async { var response = await http.get(Uri.parse('https://example.com')); print('Response status: ${response.statusCode}'); print('Response body: ${response.body}'); } Anahtar Kelimeler (Keywords): Dart'ta anahtar kelimeler (keywords), dilin yap\u0131sal \u00f6\u011felerini ifade eden, \u00f6zel anlamlara sahip kelimelerdir. Bu kelimeler, programda belirli i\u015flemleri ger\u00e7ekle\u015ftirmek ve dilin kurallar\u0131n\u0131 tan\u0131mlamak i\u00e7in kullan\u0131l\u0131r. Dart dilinde, bu kelimeler de\u011fi\u015fken, fonksiyon, s\u0131n\u0131f ad\u0131 vb. olarak kullan\u0131lamaz. A\u015fa\u011f\u0131da Dart dilinde kullan\u0131lan t\u00fcm anahtar kelimeler: abstract else import super as enum assert export in switch async extends await external is sync break factory case false mixin this catch final class finally new throw const for continue Function null true covariant get default if on typedef deferred implements do interface operator var dynamic in else extends part void enum with Tipler ve Methodlar\u0131: Dart dilinde \u00e7e\u015fitli veri t\u00fcrleri ve tip sistemleri bulunur. A\u015fa\u011f\u0131da, Dart'taki ana veri t\u00fcrleri ve tip sistemleri hakk\u0131nda detayl\u0131 bilgi verilmi\u015f ve her biri i\u00e7in kullan\u0131labilecek methodlar ve fonksiyonlar tablo \u015feklinde sunulmu\u015ftur. 1. Built-in Types (Yerle\u015fik Tipler) Veri Tipi Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek int abs() Say\u0131n\u0131n mutlak de\u011ferini d\u00f6nd\u00fcr\u00fcr. (-5).abs() -> 5 compareTo() \u0130ki say\u0131y\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131r. (K\u00fc\u00e7\u00fckse -1, e\u015fitse 0, b\u00fcy\u00fckse 1 d\u00f6ner.) 5.compareTo(3) -> 1 isEven Say\u0131n\u0131n \u00e7ift olup olmad\u0131\u011f\u0131n\u0131 kontrol eder. 4.isEven -> true isOdd Say\u0131n\u0131n tek olup olmad\u0131\u011f\u0131n\u0131 kontrol eder. 3.isOdd -> true double ceil() Say\u0131y\u0131 yukar\u0131 yuvarlar. 2.3.ceil() -> 3 floor() Say\u0131y\u0131 a\u015fa\u011f\u0131 yuvarlar. 2.9.floor() -> 2 round() Say\u0131y\u0131 en yak\u0131n tam say\u0131ya yuvarlar. 3.14.round() -> 3 toInt() Ondal\u0131k say\u0131y\u0131 tam say\u0131ya \u00e7evirir. 3.99.toInt() -> 3 String contains() Metnin belirli bir alt diziyi i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. \"dart\".contains('ar') -> true length Metin uzunlu\u011funu d\u00f6ner. \"Hello\".length -> 5 toLowerCase() Metni k\u00fc\u00e7\u00fck harfe \u00e7evirir. \"DART\".toLowerCase() -> \"dart\" toUpperCase() Metni b\u00fcy\u00fck harfe \u00e7evirir. \"dart\".toUpperCase() -> \"DART\" substring() Metnin belirli bir k\u0131sm\u0131n\u0131 al\u0131r. \"dart\".substring(1, 3) -> \"ar\" bool toString() Mant\u0131ksal de\u011feri (true/false) string olarak d\u00f6nd\u00fcr\u00fcr. true.toString() -> \"true\" List add() Listeye bir eleman ekler. list.add(10) remove() Listeden bir eleman siler. list.remove(10) length Listenin uzunlu\u011funu d\u00f6ner. [1, 2, 3].length -> 3 contains() Listenin bir eleman\u0131 i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. [1, 2, 3].contains(2) -> true join() Listedeki \u00f6\u011feleri birle\u015ftirir ve bir string d\u00f6ner. [\"a\", \"b\", \"c\"].join(\",\") -> \"a,b,c\" Set add() Set'e bir eleman ekler. set.add(4) remove() Set'ten bir eleman siler. set.remove(3) contains() Set'in bir eleman\u0131 i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. {1, 2, 3}.contains(2) -> true Map addAll() Birden fazla anahtar-de\u011fer \u00e7ifti ekler. map.addAll({\"key2\": 2, \"key3\": 3}) remove() Belirli bir anahtar-de\u011fer \u00e7iftini siler. map.remove(\"key1\") containsKey() Haritan\u0131n belirli bir anahtar\u0131 i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. map.containsKey(\"key1\") -> true containsValue() Haritan\u0131n belirli bir de\u011feri i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. map.containsValue(1) -> true 2. Records (Kay\u0131tlar) \u00d6zellik Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek Kay\u0131t Tan\u0131mlama - Record'lar, adland\u0131r\u0131lm\u0131\u015f alanlar i\u00e7eren veri yap\u0131lar\u0131d\u0131r. var person = (name: 'Osman', age: 30); Alan Eri\u015fimi - Alanlara . (nokta) operat\u00f6r\u00fc ile eri\u015filir. print(person.name); // \u00c7\u0131kt\u0131: Osman Yeniden Tan\u0131mlama with Alanlar\u0131 de\u011fi\u015ftirerek yeni kay\u0131t olu\u015fturma. var updatedPerson = person with (age: 31); Destructuring - \u0130\u00e7erikleri ay\u0131rmak i\u00e7in destructuring kullan\u0131l\u0131r. var (name, age) = person; toString() toString() Record'un string temsilini d\u00f6nd\u00fcr\u00fcr. print(person.toString()); // \u00c7\u0131kt\u0131: (name: Osman, age: 30) hashCode hashCode Record'un hash kodunu d\u00f6nd\u00fcr\u00fcr. print(person.hashCode); // \u00c7\u0131kt\u0131: Bir say\u0131sal hash kodu runtimeType runtimeType Record'un t\u00fcr\u00fcn\u00fc d\u00f6nd\u00fcr\u00fcr. print(person.runtimeType); // \u00c7\u0131kt\u0131: (name: String, age: int) 3. Collections (Koleksiyonlar) List Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek add() Listeye bir eleman ekler. list.add(10) remove() Listeden bir eleman siler. list.remove(10) length Listenin uzunlu\u011funu d\u00f6ner. [1, 2, 3].length -> 3 contains() Liste i\u00e7inde bir eleman olup olmad\u0131\u011f\u0131n\u0131 kontrol eder. [1, 2, 3].contains(2) -> true join() Liste \u00f6\u011felerini birle\u015ftirir ve string d\u00f6ner. [\"a\", \"b\", \"c\"].join(\",\") -> \"a,b,c\" sort() Listeyi s\u0131ralar. list.sort() Set Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek add() Set'e bir eleman ekler. set.add(4) remove() Set'ten bir eleman siler. set.remove(3) contains() Set'in bir eleman\u0131 i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. {1, 2, 3}.contains(2) -> true union() \u0130ki setin birle\u015fimini d\u00f6nd\u00fcr\u00fcr. {1, 2}.union({2, 3}) -> {1, 2, 3} intersection() \u0130ki setin kesi\u015fimini d\u00f6nd\u00fcr\u00fcr. {1, 2}.intersection({2, 3}) -> {2} Map Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek addAll() Birden fazla anahtar-de\u011fer \u00e7ifti ekler. map.addAll({\"key2\": 2, \"key3\": 3}) remove() Belirli bir anahtar-de\u011fer \u00e7iftini siler. map.remove(\"key1\") containsKey() Belirli bir anahtar\u0131 i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. map.containsKey(\"key1\") -> true containsValue() Belirli bir de\u011feri i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. map.containsValue(1) -> true forEach() Map'teki her anahtar-de\u011fer \u00e7ifti i\u00e7in bir i\u015flem yapar. map.forEach((key, value) => print('$key: $value')); 4. Generics (Genel T\u00fcrler) \u00d6zellik Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek Genel Listeler add() Liste ye eleman ekler. | List<int> numbers = []; numbers.add(1); | | Genel Mapler | putIfAbsent() | Anahtar mevcut de\u011filse yeni anahtar-de\u011fer \u00e7ifti ekler. | Map<String, int> map = {}; map.putIfAbsent('key', () => 1); | | Genel Fonksiyonlar | Function<T> | Tip g\u00fcvenli fonksiyonlar\u0131 temsil eder. | Function<int> square = (int x) => x * x; | | Kapsay\u0131c\u0131 S\u0131n\u0131flar | T | Genel t\u00fcrler i\u00e7eren s\u0131n\u0131flar. | class Box<T> { T value; Box(this.value); } | 5. Typedefs (T\u00fcr Tan\u0131mlar\u0131) \u00d6zellik Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek Fonksiyon Tipi Tan\u0131mlama typedef Fonksiyon t\u00fcrlerini tan\u0131mlar. typedef IntFunction = int Function(int); Kullan\u0131m - Tan\u0131mlanan tipi bir fonksiyon olarak kullanma. IntFunction addOne = (int x) => x + 1; 6. Type System (T\u00fcr Sistemi) \u00d6zellik Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek Dinamik T\u00fcr dynamic Her t\u00fcrde de\u011fer alabilen bir de\u011fi\u015fken t\u00fcr\u00fcd\u00fcr. dynamic x = 10; x = 'string'; N\u00f6tr T\u00fcr Object T\u00fcm Dart nesnelerinin temel t\u00fcr\u00fcd\u00fcr. Object obj = 'hello'; obj = 42; Sabit T\u00fcrler const Sabit de\u011ferleri temsil eder. const pi = 3.14; Final final Bir kere atand\u0131ktan sonra de\u011fi\u015fmeyen de\u011fi\u015fkenler. final name = 'Osman';","title":"Giri\u015f:"},{"location":"#giris","text":"T\u00fcm Dart Kodlar\u0131 bir main() i\u00e7inde \u00e7al\u0131\u015f\u0131r. \u00d6rnek bir kod olarak klasik bir Hello World Kodu yazal\u0131m. void main() { print('Hello World!'); }","title":"Giri\u015f:"},{"location":"#yorum-satrlar","text":"Yorum sat\u0131rlar\u0131 kod taraf\u0131ndan okunmaz ve derlenmez. Yorum sat\u0131rlar\u0131 yaz\u0131l\u0131mc\u0131n\u0131n ve ekibinin baz\u0131 notlar\u0131n\u0131 veyahut kodu a\u00e7\u0131klamas\u0131 i\u00e7in yaz\u0131lan a\u00e7\u0131klamalar\u0131n yaz\u0131laca\u011f\u0131 k\u0131s\u0131md\u0131r. Yorum sat\u0131rlar\u0131 clean code prensibi ve ekip \u00e7al\u0131\u015fmas\u0131 i\u00e7in \u00f6nemli bir fakt\u00f6rd\u00fcr. Dart'ta tek sat\u0131rl\u0131k yorum sat\u0131rlar\u0131 // ile ba\u015flar. \u00d6rne\u011fin; dart // Bu bir tek sat\u0131rl\u0131k Yorum sat\u0131r\u0131d\u0131r Dart'ta \u00e7ok sat\u0131rl\u0131k yorum sat\u0131rlar\u0131 /* */ aras\u0131na yaz\u0131l\u0131r. \u00d6ncekinden fark\u0131 \u00e7ok sat\u0131rl\u0131 olarak kullan\u0131labilir. \u00d6rnek kullan\u0131m; dart /* Bu bir \u00e7ok sat\u0131rl\u0131k yorum sat\u0131r\u0131d\u0131r. Bu kodlar okunmaz veyahut derlenmez. */","title":"Yorum Sat\u0131rlar\u0131:"},{"location":"#syntax-temelleri","text":"Dart dilinin temel syntax yap\u0131s\u0131 hakk\u0131nda bilgi edinece\u011fiz.","title":"Syntax Temelleri:"},{"location":"#degiskenler","text":"De\u011fi\u015fkenler, program i\u00e7erisinde kullan\u0131lan ve de\u011fi\u015fkenlik g\u00f6steren de\u011ferlerdir. - De\u011fi\u015fkenler var , final ve const anahtar kelimeleri ile tan\u0131mlanabilir. - var anahtar kelimesi ile tan\u0131mlanan de\u011fi\u015fkenler tipini derleme zaman\u0131nda otomatik olarak belirler. dart var name = 'Osman'; final anahtar kelimesi ile tan\u0131mlanan de\u011fi\u015fkenler, bir kere atanan de\u011ferini de\u011fi\u015ftiremez. dart final surname = 'Beyhan'; const anahtar kelimesi ile tan\u0131mlanan de\u011fi\u015fkenler, program \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda sabitlenir ve de\u011fi\u015ftirilemez. dart const pi = 3.14; De\u011fi\u015fkenler tipine g\u00f6re de tan\u0131mlanabilir. Dart dilinde \u00e7e\u015fitli veri t\u00fcrleri (de\u011fi\u015fken tipleri) bulunmaktad\u0131r. Bu veri tipleri, Dart'\u0131n statik olarak t\u00fcr kontrol\u00fcne dayal\u0131 g\u00fc\u00e7l\u00fc yap\u0131s\u0131n\u0131 destekler. Dart'taki temel de\u011fi\u015fken tiplerini \u015fu \u015fekilde \u00f6zetleyebiliriz:","title":"De\u011fi\u015fkenler:"},{"location":"#1-int","text":"Tam say\u0131lar\u0131 temsil eder. Pozitif ve negatif tam say\u0131lar\u0131 kapsar. dart int age = 30; int negative = -5;","title":"1. int"},{"location":"#2-double","text":"Ondal\u0131kl\u0131 say\u0131lar i\u00e7in kullan\u0131l\u0131r. Kesirli de\u011ferler temsil edilir. dart double height = 1.75; double pi = 3.14159;","title":"2. double"},{"location":"#3-num","text":"Hem int hem de double t\u00fcrlerini kapsayan bir veri t\u00fcr\u00fcd\u00fcr. int ve double de\u011ferleri alabilir. dart num temperature = 37.5; num year = 2024;","title":"3. num"},{"location":"#4-string","text":"Metin ifadelerini temsil eder. Tek veya \u00e7ift t\u0131rnakla belirtilir. dart String name = 'Osman Beyhan'; String greeting = \"Merhaba, D\u00fcnya!\";","title":"4. String"},{"location":"#5-bool","text":"Mant\u0131ksal veri tipi olup, true veya false de\u011ferlerini al\u0131r. dart bool isLoggedIn = true; bool isRaining = false;","title":"5. bool"},{"location":"#6-list","text":"Bir dizi veya listeyi temsil eder. Hem sabit boyutlu hem de dinamik olarak b\u00fcy\u00fcyebilen yap\u0131lar olu\u015fturulabilir. dart List<int> numbers = [1, 2, 3, 4]; List<String> names = ['Ahmet', 'Mehmet', 'Ay\u015fe'];","title":"6. List"},{"location":"#7-set","text":"Her \u00f6\u011fesi benzersiz olan ve s\u0131ralanmam\u0131\u015f koleksiyonlar\u0131 temsil eder. dart Set<int> uniqueNumbers = {1, 2, 3, 4, 5};","title":"7. Set"},{"location":"#8-map","text":"Anahtar-de\u011fer \u00e7iftleri ile \u00e7al\u0131\u015fan veri yap\u0131s\u0131d\u0131r. dart Map<String, int> ages = {'Ali': 25, 'Veli': 30};","title":"8. Map"},{"location":"#9-dynamic","text":"Bir de\u011fi\u015fkenin veri t\u00fcr\u00fcn\u00fcn \u00e7al\u0131\u015fma zaman\u0131nda belirlenmesini sa\u011flar. dynamic t\u00fcr\u00fc kullan\u0131ld\u0131\u011f\u0131nda, o de\u011fi\u015fken herhangi bir veri tipi alabilir. dart dynamic value = 42; value = 'Bir metin'; // T\u00fcr\u00fc de\u011fi\u015ftirebilir.","title":"9. dynamic"},{"location":"#10-var","text":"Veri tipini otomatik olarak belirler. Bir kez belirlendikten sonra de\u011fi\u015fkenin tipi sabit kal\u0131r. dart var city = 'Istanbul'; // Dart bunu otomatik olarak String olarak belirler. var score = 100; // Dart bunu int olarak belirler.","title":"10. var"},{"location":"#11-object","text":"Dart'taki t\u00fcm nesnelerin \u00fcst s\u0131n\u0131f\u0131d\u0131r. Herhangi bir veri t\u00fcr\u00fc Object tipinde bir de\u011fi\u015fkene atanabilir. dart Object something = 'Dart'; something = 123;","title":"11. Object"},{"location":"#12-null","text":"null de\u011ferini tutabilen bir t\u00fcrd\u00fcr. Dart'ta, de\u011fi\u015fkenler varsay\u0131lan olarak null de\u011fer alabilir. dart String? name = null; // null olabilmesi i\u00e7in '?' i\u015fareti ile tan\u0131mlan\u0131r. Bu veri t\u00fcrleri Dart'\u0131n temelini olu\u015fturur ve daha karma\u015f\u0131k yap\u0131lar ve s\u0131n\u0131flar tan\u0131mlamak i\u00e7in kullan\u0131labilir.","title":"12. Null"},{"location":"#operatorler","text":"Tabii, Dart dilindeki operat\u00f6rler farkl\u0131 kategorilere ayr\u0131lmaktad\u0131r. Bu kategoriler aras\u0131nda aritmetik, kar\u015f\u0131la\u015ft\u0131rma, mant\u0131ksal, bit d\u00fczeyinde operat\u00f6rler ve atama operat\u00f6rleri gibi gruplar bulunur. Operat\u00f6r A\u00e7\u0131klama \u00d6rnek Aritmetik Operat\u00f6rler + Toplama a + b - \u00c7\u0131karma a - b * \u00c7arpma a * b / B\u00f6lme a / b % Mod alma (kalan bulma) a % b ~/ Tamsay\u0131 b\u00f6lme a ~/ b ++ Bir art\u0131rma (\u00f6ncesi veya sonras\u0131) a++ veya ++a -- Bir azaltma (\u00f6ncesi veya sonras\u0131) a-- veya --a Kar\u015f\u0131la\u015ft\u0131rma Operat\u00f6rleri == E\u015fit mi? a == b != E\u015fit de\u011fil mi? a != b > B\u00fcy\u00fckt\u00fcr a > b < K\u00fc\u00e7\u00fckt\u00fcr a < b >= B\u00fcy\u00fck veya e\u015fit a >= b <= K\u00fc\u00e7\u00fck veya e\u015fit a <= b Mant\u0131ksal Operat\u00f6rler && Mant\u0131ksal VE (Logical AND) a && b || Mant\u0131ksal VEYA (Logical OR) a || b ! Mant\u0131ksal DE\u011e\u0130L (Logical NOT) !a Bit D\u00fczeyinde Operat\u00f6rler & Bit d\u00fczeyinde VE (AND) a & b | Bit d\u00fczeyinde VEYA (OR) a | b ^ Bit d\u00fczeyinde \u00d6zel VEYA (XOR) a ^ b ~ Bit d\u00fczeyinde TERS\u0130 (NOT) ~a << Bitleri sola kayd\u0131rma a << 2 >> Bitleri sa\u011fa kayd\u0131rma a >> 2 Atama Operat\u00f6rleri = Atama a = b += Toplam ve atama a += b -= Fark ve atama a -= b *= \u00c7arp\u0131m ve atama a *= b /= B\u00f6l\u00fcm ve atama a /= b ~/= Tamsay\u0131 b\u00f6l\u00fcm ve atama a ~/= b %= Kalan ve atama a %= b &= Bit d\u00fczeyinde VE ve atama a &= b |= Bit d\u00fczeyinde VEYA ve atama a |= b ^= Bit d\u00fczeyinde XOR ve atama a ^= b <<= Bitleri sola kayd\u0131rma ve atama a <<= 2 >>= Bitleri sa\u011fa kayd\u0131rma ve atama a >>= 2 Di\u011fer Operat\u00f6rler ?. E\u011fer null de\u011filse \u00fcye eri\u015fimi sa\u011flar a?.b ?? Null kontrol\u00fc (E\u011fer null ise alternatif de\u011fer d\u00f6ner) a ?? b ??= E\u011fer null ise atama a ??= b is T\u00fcr kontrol\u00fc a is String is! T\u00fcr kontrol\u00fc (de\u011filse) a is! int as T\u00fcr d\u00f6n\u00fc\u015ft\u00fcrme a as String [] Listeden \u00f6\u011fe alma a[0] []= Listeye \u00f6\u011fe atama a[0] = 5 () Fonksiyon \u00e7a\u011f\u0131rma myFunction()","title":"Operat\u00f6rler:"},{"location":"#ozel-operatorler-acklamalar","text":"?. (Ko\u015fullu \u00dcye Eri\u015fimi) : E\u011fer bir nesne null ise, ?. operat\u00f6r\u00fc null kontrol\u00fc yapar ve \u00fcye eri\u015fimini engeller. dart String? name; print(name?.length); // null d\u00f6ner ?? (Null Birle\u015fim Operat\u00f6r\u00fc) : E\u011fer bir de\u011fer null ise, alternatif bir de\u011fer d\u00f6ner. dart String? name; String userName = name ?? 'Guest'; ??= (Null ile Atama) : E\u011fer bir de\u011fi\u015fken null ise, ona bir de\u011fer atan\u0131r. dart String? name; name ??= 'Guest'; // E\u011fer name null ise 'Guest' atan\u0131r. Bu operat\u00f6rler Dart dilinde temel yap\u0131 ta\u015flar\u0131n\u0131 olu\u015fturarak, ifadelerin daha k\u0131sa ve okunabilir bir \u015fekilde yaz\u0131lmas\u0131na olanak sa\u011flar.","title":"\u00d6zel Operat\u00f6rler A\u00e7\u0131klamalar\u0131:"},{"location":"#meta-data","text":"Dart'ta metadata , kodunuza ek a\u00e7\u0131klamalar veya bilgi eklemek i\u00e7in kullan\u0131l\u0131r. Metadata, s\u0131n\u0131flar, de\u011fi\u015fkenler, fonksiyonlar, parametreler ve di\u011fer dil \u00f6\u011felerine a\u00e7\u0131klama ekleyerek onlar\u0131n anlam\u0131n\u0131 geni\u015fletmeye ve belirli i\u015flevler eklemeye olanak tan\u0131r. Dart'taki metadata'y\u0131 genellikle annotation (a\u00e7\u0131klama) olarak adland\u0131r\u0131r\u0131z. Metadata, @ sembol\u00fc ile kullan\u0131l\u0131r ve genellikle bir s\u0131n\u0131f ya da const ile tan\u0131mlanan bir sabit ile birlikte gelir.","title":"Meta Data:"},{"location":"#yaygn-kullanm-alanlar","text":"@override : Bir metodun \u00fcst s\u0131n\u0131f taraf\u0131ndan tan\u0131mlanan bir metodu ge\u00e7ersiz k\u0131ld\u0131\u011f\u0131n\u0131 belirtir. @deprecated : Bir s\u0131n\u0131f, metod veya \u00f6zellik art\u0131k kullan\u0131lm\u0131yorsa, bunun yerine neyin kullan\u0131laca\u011f\u0131n\u0131 belirtmek i\u00e7in kullan\u0131l\u0131r. Custom (\u00f6zel) metadata : Kendi metadata s\u0131n\u0131flar\u0131n\u0131z\u0131 olu\u015fturabilir ve kullanabilirsiniz.","title":"Yayg\u0131n Kullan\u0131m Alanlar\u0131"},{"location":"#ornekler","text":"","title":"\u00d6rnekler"},{"location":"#1-override-kullanm","text":"class Animal { void sound() { print('Animal makes a sound'); } } class Dog extends Animal { @override void sound() { print('Dog barks'); } } Burada @override , Dog s\u0131n\u0131f\u0131n\u0131n sound metodunun Animal s\u0131n\u0131f\u0131ndaki ayn\u0131 isimli metodu ge\u00e7ersiz k\u0131ld\u0131\u011f\u0131n\u0131 belirtir.","title":"1. @override Kullan\u0131m\u0131"},{"location":"#2-deprecated-kullanm","text":"class MyClass { @deprecated void oldMethod() { print('This method is deprecated'); } void newMethod() { print('This is the new method'); } } @deprecated ile i\u015faretlenmi\u015f metod, art\u0131k kullan\u0131lmamas\u0131 gereken bir metod oldu\u011funu belirtir. Derleyici bu metodu kullan\u0131rsan\u0131z bir uyar\u0131 verecektir.","title":"2. @deprecated Kullan\u0131m\u0131"},{"location":"#3-ozel-metadata-olusturma","text":"Dart'ta kendi metadata'n\u0131z\u0131 tan\u0131mlayabilir ve kullanabilirsiniz. \u00d6rne\u011fin, bir s\u0131n\u0131f\u0131 \u00f6zel bir i\u015faretle i\u015faretlemek istiyorsan\u0131z: class MyAnnotation { final String info; const MyAnnotation(this.info); } @MyAnnotation('This is a custom annotation') class MyClass { void myMethod() { print('Using custom metadata'); } } Burada MyAnnotation ad\u0131nda bir metadata tan\u0131mlanm\u0131\u015f ve MyClass \u00fczerine uygulanm\u0131\u015ft\u0131r. Bu sayede MyClass '\u0131n belirli bir bilgiyle i\u015faretlendi\u011fi g\u00f6r\u00fcl\u00fcr.","title":"3. \u00d6zel Metadata Olu\u015fturma"},{"location":"#sonuc","text":"Dart'taki metadata, kodunuza a\u00e7\u0131klama eklemek, belirsizli\u011fi azaltmak veya derleyiciye ve programc\u0131ya belirli y\u00f6nergeler vermek i\u00e7in kullan\u0131l\u0131r. Hem yerle\u015fik (built-in) hem de \u00f6zel metadata tan\u0131mlayarak kodunuzu daha anlaml\u0131 hale getirebilirsiniz.","title":"Sonu\u00e7"},{"location":"#kutuphaneler-ve-import-etme","text":"Dart dilinde k\u00fct\u00fcphaneler (libraries), kodunuzu mod\u00fcler bir \u015fekilde d\u00fczenlemek ve yeniden kullan\u0131labilir hale getirmek i\u00e7in kullan\u0131l\u0131r. Dart'ta k\u00fct\u00fcphaneler, genellikle ba\u015fka projelerde de kullan\u0131labilecek s\u0131n\u0131flar, fonksiyonlar ve de\u011fi\u015fkenler i\u00e7erir. Bu k\u00fct\u00fcphaneleri kullanabilmek i\u00e7in kodunuza import anahtar kelimesiyle dahil edebilirsiniz.","title":"K\u00fct\u00fcphaneler ve import etme:"},{"location":"#kutuphaneler-libraries","text":"Her Dart dosyas\u0131 asl\u0131nda bir k\u00fct\u00fcphane olarak kabul edilir. Ancak, daha karma\u015f\u0131k projelerde kodunuzu daha iyi organize etmek i\u00e7in birden fazla k\u00fct\u00fcphane olu\u015fturabilirsiniz. Dart'ta \u00fc\u00e7 ana t\u00fcrde k\u00fct\u00fcphane bulunur: Yerle\u015fik K\u00fct\u00fcphaneler (Built-in Libraries) : Dart taraf\u0131ndan sa\u011flanan ve dart: ile ba\u015flayan k\u00fct\u00fcphaneler. Paket K\u00fct\u00fcphaneleri (Package Libraries) : pub.dev gibi kaynaklardan gelen ve package: ile ba\u015flayan k\u00fct\u00fcphaneler. Yerel veya \u00d6zelle\u015ftirilmi\u015f K\u00fct\u00fcphaneler : Projeye \u00f6zel k\u00fct\u00fcphaneler.","title":"K\u00fct\u00fcphaneler (Libraries)"},{"location":"#import-kullanm","text":"Dart'ta bir k\u00fct\u00fcphaneyi kullanmak i\u00e7in import anahtar kelimesi kullan\u0131l\u0131r. K\u00fct\u00fcphaneler \u015fu formatlarda import edilir: Yerle\u015fik K\u00fct\u00fcphaneler (dart:) Paket K\u00fct\u00fcphaneleri (package:) Dosya Yolu ile K\u00fct\u00fcphaneler","title":"import Kullan\u0131m\u0131"},{"location":"#1-yerlesik-kutuphaneler-dart","text":"Dart diliyle birlikte gelen yerle\u015fik k\u00fct\u00fcphaneler dart: ile ba\u015flar. \u00d6rne\u011fin: import 'dart:math'; // Matematiksel fonksiyonlar i\u00e7in import 'dart:io'; // I/O i\u015flemleri i\u00e7in import 'dart:convert'; // JSON ve UTF-8 i\u015flemleri i\u00e7in","title":"1. Yerle\u015fik K\u00fct\u00fcphaneler (dart:)"},{"location":"#2-paket-kutuphaneleri-package","text":"Dart'\u0131n pub.dev paket y\u00f6neticisiyle indirilen k\u00fct\u00fcphaneler package: ile kullan\u0131l\u0131r. \u00d6rne\u011fin, http paketini kullanarak HTTP istekleri yapabilirsiniz: import 'package:http/http.dart' as http; // HTTP istekleri i\u00e7in pubspec.yaml dosyan\u0131zda bu paketleri belirtmeniz gerekti\u011fini unutmay\u0131n: dependencies: http: ^0.13.3","title":"2. Paket K\u00fct\u00fcphaneleri (package:)"},{"location":"#3-yerel-dosya-yolu-ile-kutuphaneler","text":"Kendi projenizdeki ba\u015fka bir dosyadan k\u00fct\u00fcphane import etmek i\u00e7in dosya yolunu kullanabilirsiniz: import 'lib/my_library.dart'; // Projedeki bir dosyay\u0131 import eder","title":"3. Yerel Dosya Yolu ile K\u00fct\u00fcphaneler"},{"location":"#import-secenekleri","text":"Dart'ta k\u00fct\u00fcphanelerle \u00e7al\u0131\u015f\u0131rken baz\u0131 ek \u00f6zellikler kullanabilirsiniz:","title":"import Se\u00e7enekleri"},{"location":"#1-as-bir-kutuphaneye-takma-ad-vermek","text":"Bir k\u00fct\u00fcphaneyi import ederken ona bir takma ad verebilirsiniz. Bu \u00f6zellikle ayn\u0131 isimde fonksiyon veya s\u0131n\u0131flar oldu\u011funda \u00e7ak\u0131\u015fmalar\u0131 \u00f6nlemek i\u00e7in kullan\u0131l\u0131r. import 'package:http/http.dart' as http; import 'package:my_project/network.dart' as network; void main() { http.get(...); network.request(...); }","title":"1. as: Bir K\u00fct\u00fcphaneye Takma Ad Vermek"},{"location":"#2-show-belirli-fonksiyonlar-veya-snflar-ice-aktarmak","text":"Bir k\u00fct\u00fcphaneden sadece belirli elemanlar\u0131 almak i\u00e7in show kullanabilirsiniz: import 'dart:math' show pi, sqrt; // Sadece pi ve sqrt fonksiyonlar\u0131n\u0131 import eder","title":"2. show: Belirli Fonksiyonlar\u0131 veya S\u0131n\u0131flar\u0131 \u0130\u00e7e Aktarmak"},{"location":"#3-hide-belirli-fonksiyonlar-veya-snflar-gizlemek","text":"Bir k\u00fct\u00fcphaneden baz\u0131 elemanlar\u0131 gizlemek i\u00e7in hide kullanabilirsiniz: import 'dart:math' hide sin, cos; // sin ve cos fonksiyonlar\u0131n\u0131 gizler, di\u011ferlerini import eder","title":"3. hide: Belirli Fonksiyonlar\u0131 veya S\u0131n\u0131flar\u0131 Gizlemek"},{"location":"#4-deferred-as-gecikmeli-yukleme","text":"E\u011fer b\u00fcy\u00fck bir k\u00fct\u00fcphaneyi ihtiya\u00e7 duyulana kadar y\u00fcklemek istemiyorsan\u0131z, gecikmeli y\u00fckleme kullanabilirsiniz. Bu, performans optimizasyonu sa\u011flar. import 'package:my_library/my_library.dart' deferred as myLibrary; void main() async { await myLibrary.loadLibrary(); // K\u00fct\u00fcphaneyi y\u00fckler myLibrary.someFunction(); }","title":"4. deferred as: Gecikmeli Y\u00fckleme"},{"location":"#ornekler_1","text":"","title":"\u00d6rnekler"},{"location":"#ornek-yerlesik-kutuphaneyi-kullanma","text":"import 'dart:math'; void main() { var random = Random(); print(random.nextInt(100)); // 0 ile 100 aras\u0131nda rastgele say\u0131 \u00fcretir }","title":"\u00d6rnek: Yerle\u015fik K\u00fct\u00fcphaneyi Kullanma"},{"location":"#ornek-paket-kutuphanesini-kullanma","text":"import 'package:http/http.dart' as http; void main() async { var response = await http.get(Uri.parse('https://example.com')); print('Response status: ${response.statusCode}'); print('Response body: ${response.body}'); }","title":"\u00d6rnek: Paket K\u00fct\u00fcphanesini Kullanma"},{"location":"#anahtar-kelimeler-keywords","text":"Dart'ta anahtar kelimeler (keywords), dilin yap\u0131sal \u00f6\u011felerini ifade eden, \u00f6zel anlamlara sahip kelimelerdir. Bu kelimeler, programda belirli i\u015flemleri ger\u00e7ekle\u015ftirmek ve dilin kurallar\u0131n\u0131 tan\u0131mlamak i\u00e7in kullan\u0131l\u0131r. Dart dilinde, bu kelimeler de\u011fi\u015fken, fonksiyon, s\u0131n\u0131f ad\u0131 vb. olarak kullan\u0131lamaz. A\u015fa\u011f\u0131da Dart dilinde kullan\u0131lan t\u00fcm anahtar kelimeler: abstract else import super as enum assert export in switch async extends await external is sync break factory case false mixin this catch final class finally new throw const for continue Function null true covariant get default if on typedef deferred implements do interface operator var dynamic in else extends part void enum with","title":"Anahtar Kelimeler (Keywords):"},{"location":"#tipler-ve-methodlar","text":"Dart dilinde \u00e7e\u015fitli veri t\u00fcrleri ve tip sistemleri bulunur. A\u015fa\u011f\u0131da, Dart'taki ana veri t\u00fcrleri ve tip sistemleri hakk\u0131nda detayl\u0131 bilgi verilmi\u015f ve her biri i\u00e7in kullan\u0131labilecek methodlar ve fonksiyonlar tablo \u015feklinde sunulmu\u015ftur.","title":"Tipler ve Methodlar\u0131:"},{"location":"#1-built-in-types-yerlesik-tipler","text":"Veri Tipi Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek int abs() Say\u0131n\u0131n mutlak de\u011ferini d\u00f6nd\u00fcr\u00fcr. (-5).abs() -> 5 compareTo() \u0130ki say\u0131y\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131r. (K\u00fc\u00e7\u00fckse -1, e\u015fitse 0, b\u00fcy\u00fckse 1 d\u00f6ner.) 5.compareTo(3) -> 1 isEven Say\u0131n\u0131n \u00e7ift olup olmad\u0131\u011f\u0131n\u0131 kontrol eder. 4.isEven -> true isOdd Say\u0131n\u0131n tek olup olmad\u0131\u011f\u0131n\u0131 kontrol eder. 3.isOdd -> true double ceil() Say\u0131y\u0131 yukar\u0131 yuvarlar. 2.3.ceil() -> 3 floor() Say\u0131y\u0131 a\u015fa\u011f\u0131 yuvarlar. 2.9.floor() -> 2 round() Say\u0131y\u0131 en yak\u0131n tam say\u0131ya yuvarlar. 3.14.round() -> 3 toInt() Ondal\u0131k say\u0131y\u0131 tam say\u0131ya \u00e7evirir. 3.99.toInt() -> 3 String contains() Metnin belirli bir alt diziyi i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. \"dart\".contains('ar') -> true length Metin uzunlu\u011funu d\u00f6ner. \"Hello\".length -> 5 toLowerCase() Metni k\u00fc\u00e7\u00fck harfe \u00e7evirir. \"DART\".toLowerCase() -> \"dart\" toUpperCase() Metni b\u00fcy\u00fck harfe \u00e7evirir. \"dart\".toUpperCase() -> \"DART\" substring() Metnin belirli bir k\u0131sm\u0131n\u0131 al\u0131r. \"dart\".substring(1, 3) -> \"ar\" bool toString() Mant\u0131ksal de\u011feri (true/false) string olarak d\u00f6nd\u00fcr\u00fcr. true.toString() -> \"true\" List add() Listeye bir eleman ekler. list.add(10) remove() Listeden bir eleman siler. list.remove(10) length Listenin uzunlu\u011funu d\u00f6ner. [1, 2, 3].length -> 3 contains() Listenin bir eleman\u0131 i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. [1, 2, 3].contains(2) -> true join() Listedeki \u00f6\u011feleri birle\u015ftirir ve bir string d\u00f6ner. [\"a\", \"b\", \"c\"].join(\",\") -> \"a,b,c\" Set add() Set'e bir eleman ekler. set.add(4) remove() Set'ten bir eleman siler. set.remove(3) contains() Set'in bir eleman\u0131 i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. {1, 2, 3}.contains(2) -> true Map addAll() Birden fazla anahtar-de\u011fer \u00e7ifti ekler. map.addAll({\"key2\": 2, \"key3\": 3}) remove() Belirli bir anahtar-de\u011fer \u00e7iftini siler. map.remove(\"key1\") containsKey() Haritan\u0131n belirli bir anahtar\u0131 i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. map.containsKey(\"key1\") -> true containsValue() Haritan\u0131n belirli bir de\u011feri i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. map.containsValue(1) -> true","title":"1. Built-in Types (Yerle\u015fik Tipler)"},{"location":"#2-records-kaytlar","text":"\u00d6zellik Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek Kay\u0131t Tan\u0131mlama - Record'lar, adland\u0131r\u0131lm\u0131\u015f alanlar i\u00e7eren veri yap\u0131lar\u0131d\u0131r. var person = (name: 'Osman', age: 30); Alan Eri\u015fimi - Alanlara . (nokta) operat\u00f6r\u00fc ile eri\u015filir. print(person.name); // \u00c7\u0131kt\u0131: Osman Yeniden Tan\u0131mlama with Alanlar\u0131 de\u011fi\u015ftirerek yeni kay\u0131t olu\u015fturma. var updatedPerson = person with (age: 31); Destructuring - \u0130\u00e7erikleri ay\u0131rmak i\u00e7in destructuring kullan\u0131l\u0131r. var (name, age) = person; toString() toString() Record'un string temsilini d\u00f6nd\u00fcr\u00fcr. print(person.toString()); // \u00c7\u0131kt\u0131: (name: Osman, age: 30) hashCode hashCode Record'un hash kodunu d\u00f6nd\u00fcr\u00fcr. print(person.hashCode); // \u00c7\u0131kt\u0131: Bir say\u0131sal hash kodu runtimeType runtimeType Record'un t\u00fcr\u00fcn\u00fc d\u00f6nd\u00fcr\u00fcr. print(person.runtimeType); // \u00c7\u0131kt\u0131: (name: String, age: int)","title":"2. Records (Kay\u0131tlar)"},{"location":"#3-collections-koleksiyonlar","text":"","title":"3. Collections (Koleksiyonlar)"},{"location":"#list","text":"Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek add() Listeye bir eleman ekler. list.add(10) remove() Listeden bir eleman siler. list.remove(10) length Listenin uzunlu\u011funu d\u00f6ner. [1, 2, 3].length -> 3 contains() Liste i\u00e7inde bir eleman olup olmad\u0131\u011f\u0131n\u0131 kontrol eder. [1, 2, 3].contains(2) -> true join() Liste \u00f6\u011felerini birle\u015ftirir ve string d\u00f6ner. [\"a\", \"b\", \"c\"].join(\",\") -> \"a,b,c\" sort() Listeyi s\u0131ralar. list.sort()","title":"List"},{"location":"#set","text":"Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek add() Set'e bir eleman ekler. set.add(4) remove() Set'ten bir eleman siler. set.remove(3) contains() Set'in bir eleman\u0131 i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. {1, 2, 3}.contains(2) -> true union() \u0130ki setin birle\u015fimini d\u00f6nd\u00fcr\u00fcr. {1, 2}.union({2, 3}) -> {1, 2, 3} intersection() \u0130ki setin kesi\u015fimini d\u00f6nd\u00fcr\u00fcr. {1, 2}.intersection({2, 3}) -> {2}","title":"Set"},{"location":"#map","text":"Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek addAll() Birden fazla anahtar-de\u011fer \u00e7ifti ekler. map.addAll({\"key2\": 2, \"key3\": 3}) remove() Belirli bir anahtar-de\u011fer \u00e7iftini siler. map.remove(\"key1\") containsKey() Belirli bir anahtar\u0131 i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. map.containsKey(\"key1\") -> true containsValue() Belirli bir de\u011feri i\u00e7erip i\u00e7ermedi\u011fini kontrol eder. map.containsValue(1) -> true forEach() Map'teki her anahtar-de\u011fer \u00e7ifti i\u00e7in bir i\u015flem yapar. map.forEach((key, value) => print('$key: $value'));","title":"Map"},{"location":"#4-generics-genel-turler","text":"\u00d6zellik Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek Genel Listeler add() Liste ye eleman ekler. | List<int> numbers = []; numbers.add(1); | | Genel Mapler | putIfAbsent() | Anahtar mevcut de\u011filse yeni anahtar-de\u011fer \u00e7ifti ekler. | Map<String, int> map = {}; map.putIfAbsent('key', () => 1); | | Genel Fonksiyonlar | Function<T> | Tip g\u00fcvenli fonksiyonlar\u0131 temsil eder. | Function<int> square = (int x) => x * x; | | Kapsay\u0131c\u0131 S\u0131n\u0131flar | T | Genel t\u00fcrler i\u00e7eren s\u0131n\u0131flar. | class Box<T> { T value; Box(this.value); } |","title":"4. Generics (Genel T\u00fcrler)"},{"location":"#5-typedefs-tur-tanmlar","text":"\u00d6zellik Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek Fonksiyon Tipi Tan\u0131mlama typedef Fonksiyon t\u00fcrlerini tan\u0131mlar. typedef IntFunction = int Function(int); Kullan\u0131m - Tan\u0131mlanan tipi bir fonksiyon olarak kullanma. IntFunction addOne = (int x) => x + 1;","title":"5. Typedefs (T\u00fcr Tan\u0131mlar\u0131)"},{"location":"#6-type-system-tur-sistemi","text":"\u00d6zellik Method/Fonksiyon A\u00e7\u0131klama \u00d6rnek Dinamik T\u00fcr dynamic Her t\u00fcrde de\u011fer alabilen bir de\u011fi\u015fken t\u00fcr\u00fcd\u00fcr. dynamic x = 10; x = 'string'; N\u00f6tr T\u00fcr Object T\u00fcm Dart nesnelerinin temel t\u00fcr\u00fcd\u00fcr. Object obj = 'hello'; obj = 42; Sabit T\u00fcrler const Sabit de\u011ferleri temsil eder. const pi = 3.14; Final final Bir kere atand\u0131ktan sonra de\u011fi\u015fmeyen de\u011fi\u015fkenler. final name = 'Osman';","title":"6. Type System (T\u00fcr Sistemi)"}]}